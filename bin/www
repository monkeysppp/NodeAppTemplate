#!/usr/bin/env node
'use strict';

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('AppTemplate:server');
var http = require('http');
var https = require('https');
var fs = require('fs');
var log = require('../lib/logging').getLogger('www');
var config = require('../lib/config');

/**
 * Get port from environment and store in Express.
 */

var httpPort = normalizePort(process.env.HTTP_PORT || config.httpPort || '3000');
var httpsPort = normalizePort(process.env.HTTP_PORT || config.httpsPort || '3001');

/**
 * Create HTTPS server.
 */

var httpsServer = https.createServer({
  key: fs.readFileSync('cert/key.pem'),
  cert: fs.readFileSync('cert/cert.pem'),
}, app);

// Redirect from http to https
var httpServer = http.createServer(function(req, res) {
  var redirectHost = stripPort(req.headers.host);
  log.info('Redirecting to https: ' + 'https://' + redirectHost + ':' + httpsPort + req.url);
  res.writeHead(301, { Location: 'https://' + redirectHost + ':' + httpsPort + req.url });
  res.end();
});

/**
 * Listen on provided port, on all network interfaces.
 */

httpsServer.listen(httpsPort);
httpsServer.on('error', onErrorHttps);
httpsServer.on('listening', onListeningHttps);

httpServer.listen(httpPort);
httpServer.on('error', onErrorHttp);
httpServer.on('listening', onListeningHttp);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Strip the port off the end of a URL
 */
function stripPort(url) {
  var pos = url.indexOf(':');
  if (pos === -1) {
    return url;
  }

  return url.substring(0, pos);
}

/**
 * Event listener for HTTP server "error" event.
 */

function onErrorHttps(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpsPort === 'string' ? 'Pipe ' + httpsPort : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onErrorHttp(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpPort === 'string' ? 'Pipe ' + httpPort : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListeningHttp() {
  var addr = httpServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  log.info('Listening on ' + bind);
}

function onListeningHttps() {
  var addr = httpsServer.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
  log.info('Listening on ' + bind);
}
